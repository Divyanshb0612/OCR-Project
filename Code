# import the necessary packages
from imutils.object_detection import non_max_suppression
import numpy as np
import argparse
import time
import cv2
import pytesseract
import pyttsx3

pytesseract.pytesseract.tesseract_cmd = "C:\\Program Files\\Tesseract-OCR\\tesseract"


# load the input image and grab the image dimensions

cap = cv2.VideoCapture(0)
engine = pyttsx3.init() 
while(True):
    # Capture frame-by-frame
        ret, image = cap.read()
        orig = image.copy()
        (H, W) = image.shape[:2]

        (newW, newH) = (320,320)
        rW = W / float(newW)
        rH = H / float(newH)


        image = cv2.resize(image, (newW, newH))
        (H, W) = image.shape[:2]

        layerNames = [
                "feature_fusion/Conv_7/Sigmoid",
                "feature_fusion/concat_3"]

        print("[INFO] loading EAST text detector...")
        net = cv2.dnn.readNet("C:\\Users\\Divya\\Desktop\\IE Projects\\OCR\\opencv-text-detection\\frozen_east_text_detection.pb")
 

        blob = cv2.dnn.blobFromImage(image, 1.0, (W, H),
                (123.68, 116.78, 103.94), swapRB=True, crop=False)
        start = time.time()
        net.setInput(blob)
        (scores, geometry) = net.forward(layerNames)
        end = time.time()
 
# show timing information on text prediction
        print("[INFO] text detection took {:.6f} seconds".format(end - start))



        (numRows, numCols) = scores.shape[2:4]
        rects = []
        confidences = []

# loop over the number of rows
        for y in range(0, numRows):
	# extract the scores (probabilities), followed by the geometrical
	# data used to derive potential bounding box coordinates that
	# surround text
                scoresData = scores[0, 0, y]
                xData0 = geometry[0, 0, y]
                xData1 = geometry[0, 1, y]
                xData2 = geometry[0, 2, y]
                xData3 = geometry[0, 3, y]
                anglesData = geometry[0, 4, y]



	# loop over the number of columns
                for x in range(0, numCols):
		# if our score does not have sufficient probability, ignore it
                        if scoresData[x] < 0.2:
                                continue

		# compute the offset factor as our resulting feature maps will
		# be 4x smaller than the input image
                        (offsetX, offsetY) = (x * 4.0, y * 4.0)

		# extract the rotation angle for the prediction and then
		# compute the sin and cosine
                        angle = anglesData[x]
                        cos = np.cos(angle)
                        sin = np.sin(angle)

		# use the geometry volume to derive the width and height of
		# the bounding box
                        h = xData0[x] + xData2[x]
                        w = xData1[x] + xData3[x]

		# compute both the starting and ending (x, y)-coordinates for
		# the text prediction bounding box
                        endX = int(offsetX + (cos * xData1[x]) + (sin * xData2[x]))
                        endY = int(offsetY - (sin * xData1[x]) + (cos * xData2[x]))
                        startX = int(endX - w)
                        startY = int(endY - h)

		# add the bounding box coordinates and probability score to
		# our respective lists
                        rects.append((startX, startY, endX, endY))
                        confidences.append(scoresData[x])


# apply non-maxima suppression to suppress weak, overlapping bounding
# boxes
        boxes = non_max_suppression(np.array(rects), probs=confidences)

# loop over the bounding boxes
        for (startX, startY, endX, endY) in boxes:
	# scale the bounding box coordinates based on the respective
	# ratios
	
                startX = int(startX * rW)
                startY = int(startY * rH)
                endX = int(endX * rW)
                endY = int(endY * rH)
	
	
                cropped = orig[startY:endY,startX:endX]
                text= pytesseract.image_to_string(cropped)
                #cv2.imshow("cropped",cropped)
                #cv2.waitKey(0)
                engine.say(text)
                engine.runAndWait() 
                cv2.rectangle(orig, (startX, startY), (endX, endY), (0, 255, 0), 2)
                cv2.putText(orig,text, (startX,startY), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)
	
        cv2.imshow("fvdjh",orig)
        cv2.waitKey(0)
	
